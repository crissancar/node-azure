name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type (major, minor, patch)'
        required: true
        default: 'patch'

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }} 
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} 
  DOCKERHUB_REPOSITORY: ${{ secrets.DOCKERHUB_REPOSITORY }} 
  AZURE_REGISTRY_SERVER: ${{ secrets.AZURE_REGISTRY_SERVER }}
  AZURE_REGISTRY_USERNAME: ${{ secrets.AZURE_REGISTRY_USERNAME }}
  AZURE_REGISTRY_PASSWORD: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

jobs:
  github_release:
    name: Github release
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.package.outputs.newTag }}
    permissions:
      contents: write

    steps:
    - name: Validate version type
      run: |
        if [[ "${{ github.event.inputs.version }}" =~ ^(major|minor|patch)$ ]]; then
          echo "Version type '${{ github.event.inputs.version }}' is valid."
        else
          echo "Error: Version type '${{ github.event.inputs.version }}' is invalid. It must be 'major', 'minor', or 'patch'."
          exit 1
        fi

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup Node.js version
      uses: actions/setup-node@v2
      with:
        node-version: '20.x'

    - name: Get previous package version
      id: prev_version
      run: echo "::set-output name=version::$(git describe --tags --abbrev=0)"

    - name: Bump version
      id: package
      uses: phips28/gh-action-bump-version@master
      with:
        tag-prefix: 'v'
        version-type: ${{ github.event.inputs.version }}
        commit-message: 'Release ${{ github.event.inputs.version }} {{version}}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Debug bump version output
      run: echo "${{ toJson(steps.package.outputs) }}"

    - name: Create CHANGELOG.md
      run: |
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## [${{ steps.package.outputs.newTag }}] - $(date +'%Y-%m-%d')" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Commits" >> CHANGELOG.md
        git log --pretty=format:"- %h %s" ${{ steps.prev_version.outputs.version }}..${{ steps.package.outputs.newTag }} >> CHANGELOG.md

    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.package.outputs.newTag }}
        release_name: ${{ steps.package.outputs.newTag }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  dockerhub_release:
    name: Dockerhub release
    runs-on: ubuntu-latest
    needs: github_release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Setup Node.js version
      uses: actions/setup-node@v2
      with:
        node-version: '20.x'

    - name: Install dependencies
      run: npm install
    
    - name: Build application
      run: npm run build --if-present

    - name: Debug github_release outputs
      run: echo "${{ toJson(needs.github_release.outputs) }}"

    - name: Set image tag
      run: |
        NEW_TAG="${{ needs.github_release.outputs.new_tag }}"
        IMAGE_TAG="${NEW_TAG:1}"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Debug environments image tag
      run: echo "${{ env.DOCKERHUB_REPOSITORY }}:${{ env.IMAGE_TAG }}-staging, ${{ env.DOCKERHUB_REPOSITORY }}:${{ env.IMAGE_TAG }}-prod"
  
    - name: Login to container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.AZURE_REGISTRY_SERVER }}
        username: ${{ env.AZURE_REGISTRY_USERNAME }}
        password: ${{ env.AZURE_REGISTRY_PASSWORD }}
        
    - name: Build and push images to Azure Container Registry
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.AZURE_REGISTRY_SERVER }}/api:${{ env.IMAGE_TAG }}-staging
          ${{ env.AZURE_REGISTRY_SERVER }}/api:${{ env.IMAGE_TAG }}-prod

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
